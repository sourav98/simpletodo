{"version":3,"sources":["components/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["TodoApp","state","input","todo","handleChange","event","setState","target","name","value","storeTodo","preventDefault","editTodo","data","key","filter","index","deleteTodo","clearTodo","this","className","onSubmit","autoComplete","onChange","placeholder","map","onClick","Component","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAqGeA,G,kNAjGXC,MAAQ,CACJC,MAAM,GACNC,KAAK,I,EAGTC,aAAe,SAACC,GACZ,EAAKC,SAAL,eAEKD,EAAME,OAAOC,KAAMH,EAAME,OAAOE,S,EAIzCC,UAAY,SAACL,GACTA,EAAMM,iBADc,MAEC,EAAKV,MAAnBC,EAFa,EAEbA,MAAMC,EAFO,EAEPA,KAEb,EAAKG,SACD,CACIH,KAAK,GAAD,mBAAMA,GAAN,CAAWD,IACfA,MAAM,M,EAKlBU,SAAW,SAACC,EAAKC,GAChB,IAAD,EACuB,EAAKb,MAAZE,GADhB,EACUD,MADV,EACgBC,MACZ,EAAKG,SACD,CACIJ,MAAMW,EACNV,KAAKA,EAAKY,QAAO,SAACF,EAAKG,GAAN,OAAeA,IAAQF,Q,EAMpDG,WAAa,SAACH,GACb,IACUX,EAAQ,EAAKF,MAAbE,KACP,EAAKG,SAAS,CACXH,KAAKA,EAAKY,QAAO,SAACF,EAAKG,GAAN,OAAeA,IAAQF,Q,EAgB/CI,UAAY,SAACb,GAETA,EAAMM,iBACN,EAAKL,SAAS,CACVH,KAAK,M,uDAIH,IAAD,SACmBgB,KAAKlB,MAAnBC,EADL,EACKA,MAAMC,EADX,EACWA,KAEhB,OACI,yBAAKiB,UAAU,kBACX,0BAAOC,SAAUF,KAAKT,UAAWU,UAAU,iBAC3C,0CACA,2BAAOE,aAAa,MACpBb,MAAOP,EACPM,KAAK,QACLe,SAAUJ,KAAKf,aACfoB,YAAY,qBAGZ,4BACIrB,EAAKsB,KAAI,SAACZ,EAAKG,GAAN,OACN,wBAAIF,IAAKE,GAAQH,EAAK,8BAClB,uBAAGO,UAAU,cACbM,QAAS,kBAAK,EAAKd,SAASC,EAAKG,MAChC,uBAAGI,UAAU,eACbM,QAAS,kBAAK,EAAKT,WAAWD,YAK3C,0BAAMU,QAASP,KAAKD,UACpBE,UAAU,SADV,SACwB,uBAAGA,UAAU,uB,GA3F9BO,cCUPC,E,uKARX,OACA,yBAAKR,UAAU,OACf,kBAAC,EAAD,W,GAJcS,IAAMF,WCSJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5c62d60c.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './TodoApp.css';\r\n\r\nclass TodoApp extends Component  {\r\n    state = {\r\n        input:\"\",\r\n        todo:[]\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            // event.target.name provided the name in the input box will be useful in case of multiple inputs\r\n            [event.target.name]:event.target.value\r\n        });\r\n    };\r\n\r\n    storeTodo = (event) =>  {\r\n        event.preventDefault();\r\n        const {input,todo} = this.state;\r\n        \r\n        this.setState(\r\n            {\r\n                todo: [...todo,input], // create a copy and then pushed using spread operator\r\n                input:\"\"\r\n            }\r\n        )\r\n    };\r\n\r\n    editTodo = (data,key) => \r\n    {\r\n        const{input,todo}= this.state;\r\n        this.setState(\r\n            {\r\n                input:data,\r\n                todo:todo.filter((data,index)=> index!==key)\r\n                \r\n            }\r\n        );\r\n    }\r\n   \r\n    deleteTodo = (key) => \r\n    {\r\n        const {todo} = this.state;\r\n        this.setState({\r\n           todo:todo.filter((data,index)=> index!==key)\r\n        });\r\n    }\r\n    // or \r\n    // {\r\n    //     const {todo} = this.state;\r\n        \r\n    //     const copytodo = [...todo]\r\n    //     copytodo.splice(key,1);\r\n        \r\n    //     this.setState({\r\n    //         todo : copytodo\r\n            \r\n    //     });\r\n    // }\r\n\r\n    clearTodo = (event) => \r\n    {\r\n        event.preventDefault();\r\n        this.setState({\r\n            todo:[]\r\n        });\r\n    }\r\n\r\n    render() {\r\n            const{input,todo} = this.state;\r\n        \r\n        return(\r\n            <div className=\"todo-container\">\r\n                <form  onSubmit={this.storeTodo} className=\"input-section\">\r\n                <h1>MY TODOIST</h1>\r\n                <input autoComplete=\"off\"\r\n                value={input} \r\n                name=\"input\"\r\n                onChange={this.handleChange} \r\n                placeholder=\"Enter your todo\"/>\r\n                </form>\r\n\r\n                <ul>  \r\n                   {todo.map((data,index) => (\r\n                       <li key={index}>{data}<span>\r\n                           <i className=\"fas fa-edit\"\r\n                           onClick={()=> this.editTodo(data,index)}></i> \r\n                            <i className=\"fas fa-trash\"\r\n                            onClick={()=> this.deleteTodo(index)}></i></span></li>\r\n                   ))}\r\n                </ul>\r\n            \r\n \r\n               <span onClick={this.clearTodo} \r\n               className=\"clear\">Clear <i className=\"fas fa-broom\"></i></span> \r\n               \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoApp;\r\n","import React from 'react';\nimport TodoApp from './components/TodoApp';\n\nclass App extends React.Component  {\n  render() {\n    return(\n    <div className=\"App\">\n    <TodoApp/>  \n   \n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}